# Guia Completo de Instala√ß√£o Segura do Arch Linux com Dois Discos

## Pr√©-requisitos
- Computador com UEFI
- SSD (sda) para sistema
- HD (sdd) para auxiliar/backup
- Pendrive boot√°vel com Arch Linux

## Passo 1: Prepara√ß√£o do Ambiente Live

### 1.1 Boot e Conex√£o
```bash
# Inicialize pelo USB do Arch Linux
# Verifique o modo UEFI
ls /sys/firmware/efi/efivars

# Conecte-se √† internet (Wi-Fi)
iwctl
device list
station wlan0 scan
station wlan0 get-networks
station wlan0 connect SUA_REDE
exit

# Ou para cabo
dhcpcd

# Atualize o rel√≥gio
timedatectl set-ntp true

# Instale ferramentas
pacman -Syy
pacman -S git reflector sudo gptfdisk btrfs-progs
```

### 1.2 Otimiza√ß√£o para PC Fraco
```bash
# Atualize mirrors para melhor velocidade
reflector --country Brazil --sort rate --save /etc/pacman.d/mirrorlist
```

## Passo 2: Particionamento e Criptografia

### 2.1 Identifica√ß√£o dos Discos
```bash
lsblk
# sda = SSD (sistema)
# sdd = HD (auxiliar)
```

### 2.2 Particionamento
```bash
# Limpeza pr√©via (se necess√°rio)
wipefs -a /dev/sda
wipefs -a /dev/sdd

# Particionar sda (SSD)
parted /dev/sda mklabel gpt
parted /dev/sda mkpart primary fat32 1MiB 513MiB
parted /dev/sda set 1 esp on
parted /dev/sda mkpart primary 513MiB 100%

# Particionar sdd (HD)
parted /dev/sdd mklabel gpt
parted /dev/sdd mkpart primary 1MiB 100%
```

### 2.3 Criptografia LUKS2
```bash
# Criptografar sda2
cryptsetup luksFormat --type luks2 -i 5000 --hash sha512 /dev/sda2
# Digite a senha mestra

# Criptografar sdd1
cryptsetup luksFormat --type luks2 -i 5000 --hash sha512 /dev/sdd1
# Digite a MESMA senha mestra

# Abrir containers
cryptsetup open /dev/sda2 cryptroot
cryptsetup open /dev/sdd1 cryptaux
```

### 2.4 Formata√ß√£o e Montagem
```bash
# Formatar parti√ß√µes
mkfs.fat -F32 /dev/sda1
mkfs.btrfs -L archlinux /dev/mapper/cryptroot
mkfs.btrfs -L archaux /dev/mapper/cryptaux

# Montar sistema
mount /dev/mapper/cryptroot /mnt

# Criar subvolumes Btrfs
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@tmp
btrfs subvolume create /mnt/@snapshots

# Remontar com subvolumes
umount /mnt
mount -o subvol=@,compress=zstd,noatime,nodiratime /dev/mapper/cryptroot /mnt

# Criar diret√≥rios
mkdir -p /mnt/{boot,home,var,tmp,.snapshots}

# Montar subvolumes
mount -o subvol=@home,compress=zstd,noatime,nodiratime /dev/mapper/cryptroot /mnt/home
mount -o subvol=@var,compress=zstd,noatime,nodiratime /dev/mapper/cryptroot /mnt/var
mount -o subvol=@tmp,compress=zstd,noatime,nodiratime /dev/mapper/cryptroot /mnt/tmp
mount -o subvol=@snapshots,compress=zstd,noatime,nodiratime /dev/mapper/cryptroot /mnt/.snapshots

# Montar EFI
mount /dev/sda1 /mnt/boot

# Montar disco auxiliar
mkdir /mnt/aux
mount /dev/mapper/cryptaux /mnt/aux
```

## Passo 3: Instala√ß√£o do Sistema

### 3.1 Instalar Pacotes
```bash
pacstrap /mnt base base-devel linux linux-firmware \
btrfs-progs snapper reflector sudo git neovim \
networkmanager iwd openssh ufw fail2ban
```

### 3.2 Configurar Fstab
```bash
genfstab -U /mnt >> /mnt/etc/fstab
```

### 3.3 Entrar no Sistema
```bash
arch-chroot /mnt
```

## Passo 4: Configura√ß√£o B√°sica

### 4.1 Fuso Hor√°rio e Localiza√ß√£o
```bash
ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
hwclock --systohc

echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "pt_BR.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=pt_BR.UTF-8" > /etc/locale.conf

echo "KEYMAP=br-abnt2" > /etc/vconsole.conf
```

### 4.2 Hostname e Hosts
```bash
echo "arch-secure" > /etc/hostname

echo "127.0.0.1 localhost" >> /etc/hosts
echo "::1 localhost" >> /etc/hosts
echo "127.0.1.1 arch-secure.localdomain arch-secure" >> /etc/hosts
```

### 4.3 Usu√°rios e Senhas
```bash
passwd
useradd -m -G wheel -s /bin/bash usuario
passwd usuario
echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
```

## Passo 5: Configura√ß√£o de Seguran√ßa

### 5.1 Initramfs
```bash
nano /etc/mkinitcpio.conf
```
Adicione na linha HOOKS:
```
HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems fsck)
```
```bash
mkinitcpio -P
```

### 5.2 GRUB e Criptografia
```bash
pacman -S grub efibootmgr

# Obter UUIDs
SDA2_UUID=$(blkid -s UUID -o value /dev/sda2)
SDD1_UUID=$(blkid -s UUID -o value /dev/sdd1)

# Configurar GRUB
echo "GRUB_ENABLE_CRYPTODISK=y" >> /etc/default/grub
echo "GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=$SDA2_UUID:cryptroot root=/dev/mapper/cryptroot cryptdevice=UUID=$SDD1_UUID:cryptaux\"" >> /etc/default/grub

# Instalar GRUB
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
```

### 5.3 Secure Boot (Opcional)
```bash
pacman -S sbctl
sbctl create-keys
sbctl enroll-keys -m
sbctl sign -s /boot/efi/EFI/GRUB/grubx64.efi
sbctl sign -s /boot/vmlinuz-linux
```

## Passo 6: Servi√ßos de Rede
```bash
systemctl enable NetworkManager
systemctl enable iwd
systemctl enable sshd
```

## Passo 7: Firewall e Prote√ß√£o
```bash
ufw default deny
ufw allow ssh
ufw enable

systemctl enable fail2ban
```

## Passo 8: Mecanismos de Autodestrui√ß√£o

### 8.1 Script de Monitoramento
```bash
nano /usr/local/bin/secure-boot-monitor
```
Conte√∫do:
```bash
#!/bin/bash
ATTEMPT_FILE="/var/log/luks-attempts.log"
MAX_ATTEMPTS=10

if [ -f "$ATTEMPT_FILE" ]; then
    ATTEMPTS=$(cat "$ATTEMPT_FILE")
else
    ATTEMPTS=0
fi

if [ "$ATTEMPTS" -ge "$MAX_ATTEMPTS" ]; then
    echo "M√ÅXIMO DE TENTATIVAS EXCEDIDO - INICIANDO AUTODESTRUI√á√ÉO"
    /usr/local/bin/self-destruct
    exit 1
fi

read -s -p "Senha de descriptografia: " password
echo

if ! echo "$password" | cryptsetup open --test-passphrase /dev/sda2; then
    echo $((ATTEMPTS + 1)) > "$ATTEMPT_FILE"
    echo "Senha incorreta. Tentativas: $((ATTEMPTS + 1))/$MAX_ATTEMPTS"
    exit 1
else
    echo "0" > "$ATTEMPT_FILE"
    echo "$password" | cryptsetup open /dev/sda2 cryptroot -
    echo "$password" | cryptsetup open /dev/sdd1 cryptaux -
    exit 0
fi
```
```bash
chmod +x /usr/local/bin/secure-boot-monitor
```

### 8.2 Script de Autodestrui√ß√£o
```bash
nano /usr/local/bin/self-destruct
```
Conte√∫do:
```bash
#!/bin/bash
echo "ATIVA√á√ÉO DO PROTOCOLO DE AUTODESTRUI√á√ÉO"
echo "Este processo √© IRREVERS√çVEL"

read -p "Digite 'CONFIRMAR' para continuar: " confirmation

if [ "$confirmation" != "CONFIRMAR" ]; then
    echo "Cancelado."
    exit 1
fi

echo "Sobrescrevendo headers LUKS..."
dd if=/dev/urandom of=/dev/sda2 bs=512 count=20480
dd if=/dev/urandom of=/dev/sdd1 bs=512 count=20480

echo "Reiniciando sistema em 10 segundos..."
sleep 10
reboot
```
```bash
chmod +x /usr/local/bin/self-destruct
```

### 8.3 Sistema de Backup
```bash
nano /usr/local/bin/backup-manager
```
Conte√∫do:
```bash
#!/bin/bash
BACKUP_DIR="/aux/backup"
LOG_FILE="/var/log/backup.log"
CURRENT_DATE=$(date +%Y%m%d-%H%M%S)

echo "$(date) - Iniciando backup" >> "$LOG_FILE"
mkdir -p "$BACKUP_DIR"

cryptsetup luksHeaderBackup /dev/sda2 --header-backup-file "$BACKUP_DIR/luks-header-sda2-$CURRENT_DATE.img"
cryptsetup luksHeaderBackup /dev/sdd1 --header-backup-file "$BACKUP_DIR/luks-header-sdd1-$CURRENT_DATE.img"

btrfs subvolume snapshot / /.snapshots/backup-$CURRENT_DATE

echo "$(date) - Backup conclu√≠do" >> "$LOG_FILE"
echo "üíæ LEMBRETE: Backups em $BACKUP_DIR"
```
```bash
chmod +x /usr/local/bin/backup-manager

# Agendar backups
crontab -e
```
Adicione:
```
0 2 * * 0 /usr/local/bin/backup-manager
```

## Passo 9: Finaliza√ß√£o
```bash
exit
umount -R /mnt
reboot
```

## Notas Importantes
- Guarde os headers LUKS em local seguro
- Teste o sistema ap√≥s instala√ß√£o
- Configure o Snapper para snapshots autom√°ticos
- Mantenha o sistema atualizado

Este guia oferece uma instala√ß√£o segura com prote√ß√£o contra ataques f√≠sicos e sistema de autodestrui√ß√£o ap√≥s 10 tentativas falhas.

# Guia Ultra-Seguro de Instala√ß√£o do Arch Linux para Hardware Limitado (4GB RAM)

## üîç Entendendo o "aviso do fstab" no parted

**√â normal** que ao modificar parti√ß√µes com `parted` voc√™ receba a mensagem "you may need to update /etc/fstab". Isso ocorre porque:

1. O `parted` apenas modifica a tabela de parti√ß√µes
2. O sistema n√£o atualiza automaticamente o `/etc/fstab`
3. Voc√™ precisar√° regenerar o fstab **ap√≥s** montar todas as parti√ß√µes

**Solu√ß√£o definitiva:** Execute `genfstab -U /mnt >> /mnt/etc/fstab` apenas **depois** de montar todas as parti√ß√µes no local correto.

## üõ°Ô∏è Configura√ß√£o de Seguran√ßa Refor√ßada para PC com 4GB RAM

### Pr√©-Instala√ß√£o: Prepara√ß√£o do Ambiente Live

```bash
# Otimiza√ß√£o para pouca mem√≥ria
echo "vm.swappiness=10" >> /etc/sysctl.d/99-sysctl.conf
echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.d/99-sysctl.conf

# Configurar zswap para melhor uso de RAM
echo "add_drivers+=\"zram\"" >> /etc/mkinitcpio.conf

# Instalar ferramentas essenciais
pacman -Syy
pacman -S gptfdisk btrfs-progs reflector sudo git
reflector --country Brazil --protocol https --sort rate --save /etc/pacman.d/mirrorlist
```

### Particionamento e Criptografia Avan√ßada

```bash
# Identificar discos
lsblk

# LIMPEZA SEGURA DOS DISCOS (com zeros)
# Isso tamb√©m resolve problemas de tabela de parti√ß√µes residual
dd if=/dev/zero of=/dev/sda bs=1M status=progress count=100
dd if=/dev/zero of=/dev/sdd bs=1M status=progress count=100

# Particionamento GPT
parted /dev/sda mklabel gpt
parted /dev/sda mkpart primary fat32 1MiB 513MiB
parted /dev/sda set 1 esp on
parted /dev/sda mkpart primary 513MiB 100%

parted /dev/sdd mklabel gpt
parted /dev/sdd mkpart primary 1MiB 100%

# Criptografia LUKS2 com par√¢metros otimizados
cryptsetup luksFormat --type luks2 --pbkdf argon2id --iter-time 5000 --hash sha512 /dev/sda2
cryptsetup luksFormat --type luks2 --pbkdf argon2id --iter-time 5000 --hash sha512 /dev/sdd1

# Adicionar chave comum aos dois discos
mkdir -p /root/luks-keys
dd if=/dev/random of=/root/luks-keys/common-key.bin bs=512 count=4
cryptsetup luksAddKey /dev/sda2 /root/luks-keys/common-key.bin
cryptsetup luksAddKey /dev/sdd1 /root/luks-keys/common-key.bin

# Abrir dispositivos
cryptsetup open --key-file /root/luks-keys/common-key.bin /dev/sda2 cryptroot
cryptsetup open --key-file /root/luks-keys/common-key.bin /dev/sdd1 cryptaux
```

### Sistema de Arquivos e Montagem com ZRAM

```bash
# Formata√ß√£o
mkfs.fat -F32 /dev/sda1
mkfs.btrfs -L archroot /dev/mapper/cryptroot
mkfs.btrfs -L archaux /dev/mapper/cryptaux

# Configurar ZRAM para swap (otimizado para 4GB RAM)
modprobe zram
echo lz4 > /sys/block/zram0/comp_algorithm
echo 1G > /sys/block/zram0/disksize
mkswap /dev/zram0
swapon /dev/zram0

# Montagem do sistema principal
mount /dev/mapper/cryptroot /mnt

# Subvolumes Btrfs (otimizados)
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@var
btrfs subvolume create /mnt/@tmp
btrfs subvolume create /mnt/@snapshots
btrfs subvolume create /mnt/@swap

umount /mnt

# Montagem com op√ß√µes otimizadas para SSD e pouca RAM
mount -o subvol=@,compress=zstd:1,noatime,nodiratime,ssd,space_cache=v2 /dev/mapper/cryptroot /mnt

mkdir -p /mnt/{boot,home,var,tmp,.snapshots,swap}
mount -o subvol=@home,compress=zstd:1,noatime,nodiratime /dev/mapper/cryptroot /mnt/home
mount -o subvol=@var,compress=zstd:1,noatime,nodiratime /dev/mapper/cryptroot /mnt/var
mount -o subvol=@tmp,compress=zstd:1,noatime,nodiratime /dev/mapper/cryptroot /mnt/tmp
mount -o subvol=@snapshots,compress=zstd:1,noatime,nodiratime /dev/mapper/cryptroot /mnt/.snapshots
mount -o subvol=@swap,compress=zstd:1,noatime,nodiratime /dev/mapper/cryptroot /mnt/swap

mount /dev/sda1 /mnt/boot
mkdir /mnt/aux
mount /dev/mapper/cryptaux /mnt/aux
```

### Instala√ß√£o do Sistema com Pacotes Otimizados

```bash
# Pacotes essenciais (leves e seguros)
pacstrap /mnt base base-devel linux linux-firmware linux-headers \
btrfs-progs snapper reflector sudo git neovim \
networkmanager iwd openssh ufw fail2ban \
zram-generator micro doas

# GERAR FSTAP AP√ìS TODAS AS MONTAGENS
genfstab -U /mnt >> /mnt/etc/fstab

# Adicionar entrada para swap no zram
echo "/dev/zram0 none swap defaults 0 0" >> /mnt/etc/fstab

arch-chroot /mnt
```

### Configura√ß√£o do Sistema com Seguran√ßa Refor√ßada

```bash
# Configura√ß√µes b√°sicas
ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
hwclock --systohc

echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "pt_BR.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=pt_BR.UTF-8" > /etc/locale.conf
echo "KEYMAP=br-abnt2" > /etc/vconsole.conf

echo "arch-secure" > /etc/hostname

# Configura√ß√£o de hosts mais segura
cat > /etc/hosts << EOF
127.0.0.1 localhost
::1 localhost
127.0.1.1 arch-secure.localdomain arch-secure
EOF

# Usu√°rios e seguran√ßa
passwd
useradd -m -G wheel -s /bin/bash usuario
passwd usuario

# Configurar doas como alternativa mais segura ao sudo
echo "permit persist :wheel" > /etc/doas.conf
chmod 0400 /etc/doas.conf

# Configura√ß√£o do zram no sistema instalado
cat > /etc/systemd/zram-generator.conf << EOF
[zram0]
zram-size = 1024
compression-algorithm = lz4
swap-priority = 100
EOF
```

### Kernel e Initramfs Otimizados

```bash
# Configura√ß√£o do mkinitcpio para seguran√ßa e desempenho
cat > /etc/mkinitcpio.conf << EOF
MODULES=(btrfs zram)
BINARIES=()
FILES=()
HOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt filesystems fsck)
COMPRESSION="zstd"
COMPRESSION_OPTIONS=(-1)
EOF

mkinitcpio -P

# Par√¢metros de kernel para seguran√ßa e desempenho
cat > /etc/sysctl.d/99-security.conf << EOF
kernel.kptr_restrict=2
kernel.dmesg_restrict=1
kernel.printk=3 3 3 3
kernel.unprivileged_bpf_disabled=1
net.core.bpf_jit_harden=2
dev.tty.ldisc_autoload=0
vm.swappiness=10
vm.vfs_cache_pressure=50
EOF
```

### Bootloader Seguro com Configura√ß√£o Avan√ßada

```bash
# Instalar e configurar GRUB
pacman -S grub efibootmgr

# Obter UUIDs
SDA2_UUID=$(blkid -s UUID -o value /dev/sda2)
SDD1_UUID=$(blkid -s UUID -o value /dev/sdd1)

# Configura√ß√£o segura do GRUB
cat > /etc/default/grub << EOF
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="Arch"
GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet mitigations=auto,nosmt security=apparmor"
GRUB_CMDLINE_LINUX="cryptdevice=UUID=$SDA2_UUID:cryptroot root=/dev/mapper/cryptroot cryptdevice=UUID=$SDD1_UUID:cryptaux"
GRUB_PRELOAD_MODULES="part_gpt part_msdos"
GRUB_ENABLE_CRYPTODISK=y
GRUB_TIMEOUT_STYLE=countdown
GRUB_TERMINAL_INPUT=console
GRUB_TERMINAL_OUTPUT=console
GRUB_DISABLE_RECOVERY=true
EOF

grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ArchLinux-Secure
grub-mkconfig -o /boot/grub/grub.cfg
```

### Sistema de Autodestrui√ß√£o e Monitoramento

```bash
# Script de autodestrui√ß√£o com verifica√ß√£o de backup
cat > /usr/local/bin/secure-destruct << 'EOF'
#!/bin/bash

# Verificar se h√° backups recentes
BACKUP_AGE=$(find /aux/backup -name "luks-header-*" -mtime -2 2>/dev/null | wc -l)

if [ "$BACKUP_AGE" -eq 0 ]; then
    echo "‚ö†Ô∏è  ALERTA CR√çTICO: N√£o h√° backups recentes!"
    echo "√öltimo backup deve ser preservado antes da autodestrui√ß√£o."
    exit 1
fi

echo "üö® INICIANDO PROTOCOLO DE DESTRUI√á√ÉO SEGURA"
echo "Este processo √© IRREVERS√çVEL e DESTRUTIVO"

for i in {10..1}; do
    echo -ne "Confirma√ß√£o necess√°ria em $i segundos...\\r"
    sleep 1
done

read -p "Digite 'CONFIRMAR-DESTRUI√á√ÉO' para continuar: " confirmation

if [ "$confirmation" != "CONFIRMAR-DESTRUI√á√ÉO" ]; then
    echo "‚ùå Autodestrui√ß√£o cancelada."
    exit 1
fi

# Destrui√ß√£o segura dos headers LUKS
echo "üîì Desbloqueando discos..."
cryptsetup open --key-file /root/luks-keys/common-key.bin /dev/sda2 cryptroot_temp
cryptsetup open --key-file /root/luks-keys/common-key.bin /dev/sdd1 cryptaux_temp

echo "üí• Sobrescrevendo headers LUKS..."
# Sobrescrever apenas os headers (√°rea cr√≠tica)
dd if=/dev/urandom of=/dev/sda2 bs=512 count=20480
dd if=/dev/urandom of=/dev/sdd1 bs=512 count=20480

echo "üîÑ Reiniciando sistema..."
sleep 3
reboot
EOF

chmod 700 /usr/local/bin/secure-destruct

# Sistema de monitoramento de tentativas
cat > /usr/local/bin/login-monitor << 'EOF'
#!/bin/bash

ATTEMPT_FILE="/var/log/login_attempts.log"
MAX_ATTEMPTS=5
LOCK_TIME=300

current_attempts() {
    [ -f "$ATTEMPT_FILE" ] && cat "$ATTEMPT_FILE" || echo 0
}

increment_attempt() {
    local current=$(current_attempts)
    echo $((current + 1)) > "$ATTEMPT_FILE"
}

reset_attempts() {
    echo 0 > "$ATTEMPT_FILE"
}

check_lock() {
    local attempts=$(current_attempts)
    if [ "$attempts" -ge "$MAX_ATTEMPTS" ]; then
        echo "üîí Sistema bloqueado por $LOCK_TIME segundos"
        sleep $LOCK_TIME
        reset_attempts
    fi
}

check_lock

# Sua l√≥gica de autentica√ß√£o aqui
EOF

chmod 700 /usr/local/bin/login-monitor
```

### Configura√ß√£o Final de Servi√ßos

```bash
# Habilitar servi√ßos essenciais
systemctl enable NetworkManager
systemctl enable iwd
systemctl enable sshd
systemctl enable fstrim.timer
systemctl enable zram-generator

# Configurar firewall restritivo
ufw default deny incoming
ufw default allow outgoing
ufw limit ssh
ufw enable

# Configurar fail2ban agressivo
cat > /etc/fail2ban/jail.d/ssh.local << EOF
[sshd]
enabled = true
maxretry = 3
bantime = 3600
findtime = 600
EOF

systemctl enable fail2ban
```

### P√≥s-Instala√ß√£o e Verifica√ß√£o

```bash
# Sair do chroot e finalizar
exit

# Verificar montagens
umount -R /mnt
swapoff /dev/zram0

# Reiniciar para o sistema novo
reboot
```

## üìù Notas de Manuten√ß√£o e Seguran√ßa

### Backup Autom√°tico dos Headers LUKS
```bash
# Adicionar ao crontab do root
0 2 * * * /usr/bin/cryptsetup luksHeaderBackup /dev/sda2 --header-backup-file /aux/backup/luks-header-sda2-$(date +%Y%m%d).img
0 3 * * * /usr/bin/cryptsetup luksHeaderBackup /dev/sdd1 --header-backup-file /aux/backup/luks-header-sdd1-$(date +%Y%m%d).img
```

### Monitoramento de Seguran√ßa
```bash
# Instalar e configurar ferramentas de monitoramento
pacman -S lynis rkhunter chkrootkit
lynis audit system
rkhunter --check
```

### Otimiza√ß√µes para 4GB RAM
```bash
# Configurar limites de mem√≥ria para servi√ßos
mkdir -p /etc/systemd/system/nginx.service.d/
cat > /etc/systemd/system/nginx.service.d/memory.conf << EOF
[Service]
MemoryMax=512M
MemoryHigh=256M
EOF
```

Este guia oferece seguran√ßa m√°xima enquanto mant√©m o desempenho adequado para sistemas com apenas 4GB de RAM. A configura√ß√£o do zram ajuda significativamente no gerenciamento de mem√≥ria, e todas as medidas de seguran√ßa s√£o balanceadas para n√£o sobrecarregar o sistema.
